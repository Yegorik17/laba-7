#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <time.h>
#include <string.h>

// Константы
#define ARRAY_SIZE 19
#define SCREEN_WIDTH 60
#define COLOR_DEFAULT 7
#define COLOR_BLUE 11
#define COLOR_GREEN 10
#define COLOR_YELLOW 14
#define COLOR_BRIGHT_WHITE 15
#define COLOR_RED 12

// Структура для хранения локализованных строк
typedef struct {
    const char* title;
    const char* developer;
    const char* program_description[3];
    const char* choose_fill_method;
    const char* random_fill;
    const char* manual_fill;
    const char* your_choice;
    const char* generating;
    const char* array_generated;
    const char* enter_numbers;
    const char* element;
    const char* input_error;
    const char* no_negative;
    const char* first_negative;
    const char* array;
    const char* sum;
    const char* press_enter;
} Localization;

// Функции установки цвета и форматированного вывода
void setColor(int color) {
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}

void printStyled(const char* text, int color, int centered) {
    setColor(color);
    if (centered) {
        int len = strlen(text);
        int padding = (SCREEN_WIDTH - len - 2) / 2;
        printf("|%*s%s%*s|\n", padding, "", text, padding + (len % 2), "");
    } else {
        printf("%s", text);
    }
    setColor(COLOR_DEFAULT);
}

void drawBorder() {
    setColor(COLOR_BLUE);
    printf("+%.*s+\n", SCREEN_WIDTH - 2, "-------------------------------------------------------");
    setColor(COLOR_DEFAULT);
}

void clearInputBuffer() {
    while (getchar() != '\n');
}

void printHeader(const char* title) {
    drawBorder();
    printStyled(title, COLOR_YELLOW, 1);
    drawBorder();
}

void fillArray(float* array, int choice) {
    if (choice == 1) {
        for (int i = 0; i < ARRAY_SIZE; i++) {
            array[i] = (rand() % 200 - 100) / 10.0;
        }
    } else {
        for (int i = 0; i < ARRAY_SIZE; i++) {
            printf("Element %d: ", i + 1);
            while (scanf("%f", &array[i]) != 1) {
                printf("Input error. Please enter a valid number: ");
                clearInputBuffer();
            }
        }
    }
}

void printArray(float* array) {
    for (int i = 0; i < ARRAY_SIZE; i++) {
        printf("%.2f ", array[i]);
    }
    printf("\n");
}

int main() {
    Localization en = {
        "=====================================================",
        "Developer: Voloshyk Yegor",
        {"Program to calculate the sum of elements before", "the first negative element. If none, result is 0."},
        "Choose fill method:", "1 - Random fill", "2 - Manual input", "Your choice: ",
        "\nGenerating random array...", "Array generated!", "Enter 19 real numbers:",
        "Element", "Input error. Please enter a valid number.", "\nNo negative elements in the array.",
        "\nFirst negative element at position %d (value: %.2f).", "\nArray: ",
        "\nSum of elements before first negative: %.2f\n\n", "Press Enter to continue..."
    };

    Localization ua = {
        "=====================================================",
        "Розробник: Волощук Єгор",
        {"Програма для обчислення суми елементів", "до першого від'ємного. Якщо його немає, результат 0."},
        "Виберіть спосіб заповнення:", "1 - Випадкові числа", "2 - Ввести вручну", "Ваш вибір: ",
        "\nГенерація випадкового масиву...", "Масив згенеровано!", "Введіть 19 дійсних чисел:",
        "Елемент", "Помилка вводу. Введіть число.", "\nУ масиві немає від'ємних елементів.",
        "\nПерший від'ємний елемент на позиції %d (значення: %.2f).", "\nМасив: ",
        "\nСума елементів до першого від'ємного: %.2f\n\n", "Натисніть Enter для завершення..."
    };

    Localization* loc;
    float array[ARRAY_SIZE];
    float sum = 0.0f;
    int found_negative = 0, i = 0;

    srand(time(NULL));
    system("cls");

    printHeader("Program by Voloshyk Yegor - Laboratory work #7");
    printStyled("Choose language / Виберіть мову:", COLOR_GREEN, 1);
    printStyled("1 - English", COLOR_DEFAULT, 1);
    printStyled("2 - Ukrainian / Українська", COLOR_DEFAULT, 1);
    printf("\n");

    printStyled("Your choice / Ваш вибір: ", COLOR_BRIGHT_WHITE, 0);
    int lang_choice;
    scanf("%d", &lang_choice);
    clearInputBuffer();

    loc = (lang_choice == 1) ? &en : &ua;
    system("cls");

    printHeader(loc->developer);
    for (i = 0; i < 3; i++) {
        printStyled(loc->program_description[i], COLOR_DEFAULT, 1);
    }
    drawBorder();
    printf("\n");

    printStyled(loc->choose_fill_method, COLOR_GREEN, 1);
    printStyled(loc->random_fill, COLOR_DEFAULT, 1);
    printStyled(loc->manual_fill, COLOR_DEFAULT, 1);
    printf("\n");

    printStyled(loc->your_choice, COLOR_BRIGHT_WHITE, 0);
    int choice;
    scanf("%d", &choice);
    clearInputBuffer();

    fillArray(array, choice);
    system("cls");

    for (i = 0; i < ARRAY_SIZE; i++) {
        if (array[i] < 0) {
            found_negative = 1;
            break;
        }
        sum += array[i];
    }

    printHeader("RESULTS / РЕЗУЛЬТАТИ");
    if (!found_negative) {
        printStyled(loc->no_negative, COLOR_RED, 0);
        sum = 0;
    } else {
        setColor(COLOR_GREEN);
        printf(loc->first_negative, i + 1, array[i]);
        setColor(COLOR_DEFAULT);
    }
    printf("\n");
    drawBorder();
    printStyled(loc->sum, COLOR_YELLOW, 0);
    printf(loc->sum, sum);
    getchar();
    return 0;
}
